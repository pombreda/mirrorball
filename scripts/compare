#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


"""
Compare source components between two platforms to help fill in modifications
for new versions of a platform.

Usage:

compare sles10 sles11

"""

import os
import sys
import shutil
import tempfile

sys.path.insert(0, os.environ['HOME'] + '/hg/mirrorball')

from conary.lib import util as cutil
sys.excepthook = cutil.genExcepthook()

from conary import checkin

from updatebot import log
from updatebot import config
from updatebot import build
from updatebot import conaryhelper
from updatebot.lib import util

from updatebot.cmdline import UserInterface

log.addRootLogger()

import logging
slog = logging.getLogger('script')

class Platform(object):
    def __init__(self, cfgPath, workdir):
        self._cfgPath = cfgPath
        self._workDir = workdir

        self._cfg = config.UpdateBotConfig()
        self._cfg.read(self._cfgPath)

        self._ui = UserInterface()

        self._helper = conaryhelper.ConaryHelper(self._cfg)
        self._builder = build.Builder(self._cfg, self._ui)

        self._checkoutdir = tempfile.mkdtemp(prefix='%s-' % self._cfg.platformName, dir=self._workDir)
        self._helper._cacheDir = self._checkoutdir

        self._checkoutCache = {}
        self._helper._checkoutCache = self._checkoutCache

    def getSources(self):
        """
        Gets a set of the latest source names.
        """

        slog.info('getting sources for %s' % self._cfg.platformName)

        res = set()
        for pkgname in self._helper.getLatestVersions():
            if pkgname.endswith(':source'):
                name = pkgname.split(':')[0]
                res.add(name)

        return res

    def checkout(self, pkgname):
        """
        Get the directory where a package is checked out, will checkout package if needed.
        """

        if pkgname in self._checkoutCache:
            return self._checkoutCache[pkgname]

        cdir = util.join(self._checkoutdir, pkgname)
        if not os.path.exists(cdir):
            self._checkoutCache[pkgname] = self._helper._edit(pkgname)

        return self._checkoutCache[pkgname]

    def checkoutAll(self, pkgnames):
        """
        checkout a list of sources.
        """

        # ignore packages that are already checked out
        names = [ x for x in pkgnames if x not in self._checkoutCache ]

        if not names:
            return

        slog.info('checking out sources for %s' % self._cfg.platformName)

        cwd = os.getcwd()
        try:
            os.chdir(self._checkoutdir)
            checkin.checkout(self._helper._repos, self._helper._ccfg, None, names)
        finally:
            os.chdir(cwd)

        # Fixup checkout cache
        for d in os.listdir(self._checkoutdir):
            if os.path.isdir(util.join(self._checkoutdir, d)):
                self._checkoutCache[d] = util.join(self._checkoutdir, d)

    def addFile(self, pkgdir, filename):
        """
        add a file to a source component
        """

        return self._helper._addFile(pkgdir, filename)

    def commit(self, pkgname, commitMessage=''):
        """
        commit changes to a source component
        """

        if not commitMessage:
            commitMessage = self._cfg.commitMessage

        return self._helper.commit(pkgname, commitMessage=commitMessage)

    def build(self, toBuild):
        """
        build packages
        """

        jobSet = []
        for source in sorted(toBuild):
            jobSet.append((source, None, None))

        return self._builder.buildmany(jobSet)


class CompareAndCopy(object):
    _ignoreFiles = ('CONARY', 'manifest', )

    def __init__(self, platformA, platformB):
        self.platformA = platformA
        self.platformB = platformB

        self._sources = None
        self._changed = set()

    def _findCommonSources(self):
        """
        get the sources that are in both platforms
        """

        sourcesA = self.platformA.getSources()
        sourcesB = self.platformB.getSources()

        self._sources = set(sourcesA).intersection(set(sourcesB))

    def checkout(self):
        """
        checkout all common sources.
        """

        self._findCommonSources()
        self.platformA.checkoutAll(self._sources)
        self.platformB.checkoutAll(self._sources)

    def compare(self, copy=False):
        """
        compare all sources in self._sources.
        """

        for source in self._sources:
            self._compare(source, copy=copy)

    def _compare(self, source, copy=False):
        """
        compare one source
        """

        adir = self.platformA.checkout(source)
        bdir = self.platformB.checkout(source)

        afiles = os.listdir(adir)
        bfiles = os.listdir(bdir)

        if len(afiles) != len(bfiles):
            slog.info('found differences in %s' % source)

            if copy:
                self._copy(adir, bdir)
                self.platformB.commit(source)
                self._changed.add(source)

    def _copy(self, adir, bdir):
        """
        move changes from a to b.
        """

        for f in os.listdir(adir):
            if f in self._ignoreFiles:
                continue
            src = util.join(adir, f)
            dest = util.join(bdir, f)
            slog.info('copying %s to %s' % (src, dest))
            shutil.copy(src, dest)

            self.platformB.addFile(bdir, f)

    def build(self):
        """
        build all modified sources
        """

        return self.platformB.build(self._changed)


if __name__ == '__main__':
    pfma = sys.argv[1]
    pfmb = sys.argv[2]

    pfmPath = os.environ['HOME'] + '/hg/mirrorball/config/%s/updatebotrc'

    workdir = tempfile.mkdtemp(prefix='updatebot-common-')

    platformA = Platform(pfmPath % pfma, workdir)
    platformB = Platform(pfmPath % pfmb, workdir)

    compare = CompareAndCopy(platformA, platformB)

    compare.checkout()
    compare.compare(copy=True)
    compare.build()

    import epdb; epdb.st()
