#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import os
import sys
from lxml import etree
import urllib2

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

from conary.lib import util
sys.excepthook = util.genExcepthook()

#import logging
#import updatebot.log
#
#updatebot.log.addRootLogger()
#log = logging.getLogger('noverrata')
#
#from updatebot import config
#
#cfg = config.UpdateBotConfig()
#cfg.read(mirrorballDir + '/config/%s/updatebotrc' % sys.argv[1] )


def fetchIdMap(doc, selector):
    idMap = {}
    for option in doc.xpath(selector):
        value = option.get('value')
        if value:
            idMap[option.text] = value
    return idMap

def fetchFamilyIdMap(doc):
    return fetchIdMap(doc, '//select[@id="familyId"]/option')

def fetchProductIdMap(doc):
    return fetchIdMap(doc, '//select[@id="productId"]/option')

def getBuildIds(doc):
    hrefs = [x.attrib['href'] for x in
             doc.xpath("//ul[@class='links']/li/a[@href]")]
    buildIds = [x.rsplit('?buildid=', 1)[1] for x in hrefs]
    return buildIds

def getTail(doc, selector, content):
    tails = [x.tail for x in doc.xpath(selector) if x.text == content]
    if tails:
        return tails[0]
    return None

def getCreateDate(doc):
    return getTail(doc, "//div[@class='info-section']/span", 'Creation Date: ')

def getPatchId(doc):
    patchId = getTail(doc, "//div[@class='readme-section']//b", 'Patch:')
    if patchId is not None:
        patchId = patchId.strip() # leading whitespace
        patchId, version = patchId.rsplit('-', 1)
        return patchId, version
    else:
        return None, None

def getDoc(fobj):
    return etree.parse(fobj, etree.HTMLParser())

def getIndex(argStr = '', **kw):
    URI = 'http://download.novell.com/patch/finder/index.jsp' + argStr
    return urllib2.urlopen(URI % kw)

def getBuild(buildId):
    # use cached buildId if we have it -- store in DB rather than
    # filesystem later if anyone cares...
    try:
        return file('bldids/%s' %buildId, 'r')
    except:
        cache = file('bldids/%s' %buildId, 'w')
        sys.stderr.write('Fetching buildid %s\n' % buildId)
        cache.write(urllib2.urlopen(
            'http://download.novell.com/Download?buildid=' + buildId).read())
        cache.close()
        return getBuild(buildId)




sys.stderr.write('Fetching toplevel index...\n')
toc = getDoc(getIndex())
familyIdMap = fetchFamilyIdMap(toc)
# Limit what we crawl to products we might care about
familyIdMap = dict([(x, familyIdMap[x]) for x in familyIdMap.keys()
                    if 'SUSE Linux Enterprise' in x])

productIdMaps = {}
for familyName in familyIdMap.keys():
    familyId = familyIdMap[familyName]
    sys.stderr.write('Fetching index for product %s...\n' % familyName)
    fdoc = getDoc(getIndex('?action=onGetMainBodyAction&familyId=%(familyId)s',
                           familyId=familyId))

    productIdMap = fetchProductIdMap(fdoc)
    # pare down more if we care
    productIdMap = dict([(x, productIdMap[x]) for x in productIdMap.keys()
                         if 'SUSE Linux Enterprise' in x])
    productIdMaps[familyId] = productIdMap

    for productName in productIdMap.keys():
        productId = productIdMap[productName]
        sys.stderr.write('Fetching index for version %s...\n' % productName)
        prod = getDoc(getIndex('?action=onGetMainBodyAction'
            '&familyId=%(familyId)s&xf=%(familyId)s'
            '&xp=%(familyId)s_%(productId)s',
            familyId=familyId, productId=productId))

        buildIds = getBuildIds(prod)

        for buildId in buildIds:
            patch = getDoc(getBuild(buildId))
            date = getCreateDate(patch)
            patchId, version = getPatchId(patch)
            if (date is not None and
                patchId is not None and
                version is not None):
                sys.stdout.write('%s\t%s\t%s\n' %(version, patchId, date))
