#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys

from conary.lib import util
sys.excepthook = util.genExcepthook()

from _scriptsetup import mirrorballDir

from updatebot import config
from updatebot import current

from conary import trovetup

def usage():
    print 'Find the latest troveSpecs of each major version of an rpm'
    print 'usage: %s <platform> <pkg_name> <pkg_name>' % sys.argv[0]
    sys.exit(1)

if len(sys.argv) < 3:
    usage()

platform = sys.argv[1]
if platform not in os.listdir(mirrorballDir + '/config'):
    usage()


confDir = mirrorballDir + '/config/' + platform

cfg = config.UpdateBotConfig()
cfg.read(confDir + '/updatebotrc')

bot = current.Bot(cfg)

pkgNames = sys.argv[2:]

targetNevras = bot._getNevrasForLabel(cfg.targetLabel)

def findLatestByMajor(pkgName):
    data = []
    pkgMap = dict([(x,targetNevras[x]) for x in targetNevras if targetNevras[x].name == pkgName])

    releases = set([ y.release for x,y in pkgMap.iteritems()])

    majors = set([x.split('.')[0] for x in releases])

    releaseMap = {}
    for nvfs, nevra in pkgMap.iteritems():
        for major in majors:
            if nevra.release.startswith(major):
                releaseMap.setdefault(major, set()).add(nvfs)

    for major in releaseMap:
        data.append(trovetup.TroveTuple(max(releaseMap[major])).asString())

    return data

latest = []

for pkgName in pkgNames:
    latest += findLatestByMajor(pkgName)

for pkg in latest:
    print pkg

import epdb;epdb.st()
