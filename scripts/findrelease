#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import sys
import logging

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

if 'CONARY_PATH' in os.environ:
    sys.path.insert(0, os.environ['CONARY_PATH'])

from updatebot import pkgsource
from updatebot import OrderedBot

log = logging.getLogger('tmplogger')

class Bot(OrderedBot):
    def findrelease(self, release):
        """
        Find the first point in the update stream that all packages that are
        included in a release version should be availble in the repository.
        """

        # load release reference source
        repoUrl = self._cfg.versionSources[release]
        relSrc = pkgsource.RpmSource(self._cfg, self._ui)
        relSrc.loadFromUrl(repoUrl)
        relSrc.finalize()

        relNevraMap = dict([ (x.getNevra(), x) for x in relSrc.srcPkgMap ])
        relNameMap = dict([ (x.name, x.getNevra()) for x in relSrc.srcPkgMap ])
        relNameSet = set(relNameMap.iterkeys())

        # load package source
        self._pkgSource.load()

        repo = {}
        repoNames = set()

        found = {}
        notfound = {}

        # Iterate over all upstream group versions that should exist.
        for updateId, updates in self._errata.iterByIssueDate(current=-1):
            repo.update([ (x.getNevra(), x) for x in updates ])
            repoNames.update(set([ x.name for x in updates ]))

            version = self._errata.getBucketVersion(updateId)

            log.info('checking: %s(%s)' % (version, updateId))

            foundRelease = True
            names = repoNames & relNameSet
            for name in names:
                nevra = relNameMap[name]
                if nevra not in repo:
                    foundRelease = False
                    notfound.setdefault(updateId, set()).add(nevra)
                else:
                    found.setdefault(updateId, set()).add(nevra)

            log.info('found: %s, not found: %s'
                     % (len(found.get(updateId, [])),
                        len(notfound.get(updateId, []))))

            if foundRelease:
                log.info('found %s release in %s(%s)' % (release, version,
                    updateId))
                break

        import epdb; epdb.st()

        return updateId

if __name__ == '__main__':
    import rmake
    import conary
    import updatebot

    print >>sys.stderr, 'using conary from', os.path.dirname(conary.__file__)
    print >>sys.stderr, 'using rmake from', os.path.dirname(rmake.__file__)
    print >>sys.stderr, 'using updatebot from', os.path.dirname(updatebot.__file__)

    from conary.lib import util
    sys.excepthook = util.genExcepthook()

    import rhnmirror

    from updatebot import config
    from updatebot import log as logSetup

    logSetup.addRootLogger()

    log = logging.getLogger('grouprebuild')

    confDir = mirrorballDir + '/config/%s' % sys.argv[1]

    cfg = config.UpdateBotConfig()
    cfg.read(confDir + '/updatebotrc')

    mcfg = rhnmirror.MirrorConfig()
    mcfg.read(confDir + '/erratarc')

    errata = rhnmirror.Errata(mcfg)
    errata.fetch()

    bot = Bot(cfg, errata)
    release = bot.findrelease(sys.argv[2])
    print release

    import epdb; epdb.st()
