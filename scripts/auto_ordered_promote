#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import os

import rhnmirror

from updatebot import OrderedBot
from updatebot.cmdline import display
from updatebot.cmdline.simple import main

def promote(cfg):
    if cfg.platformName == 'rhel':
        mcfg = rhnmirror.MirrorConfig()
        mcfg.read(os.path.join(cfg.configPath, 'erratarc'))

        errata = rhnmirror.Errata(mcfg)
        errata.fetch()

        bot = OrderedBot(cfg, errata)
    else:
        bot = OrderedBot(cfg, None)

        if cfg.platformName == 'sles':
            from errata.sles import AdvisoryManager as Errata

        elif cfg.platformName == 'sles11':
            from errata.sles11 import AdvisoryManager11 as Errata

        elif cfg.platformName == 'centos':
            from errata.centos import AdvisoryManager as Errata

        else:
            raise RuntimeError, 'no errata source found for %s' % cfg.platformName

        errata = Errata(bot._pkgSource)
        bot._errata._errata = errata

    trvMap = bot.promote()
    if trvMap:
        print 'Updated the following troves:'
        print display.displayTroveMap(trvMap)

    return 0


if __name__ == '__main__':
    import sys
    from conary.lib import util
    sys.excepthook = util.genExcepthook(debug=False)

    sys.exit(main(sys.argv, promote))
