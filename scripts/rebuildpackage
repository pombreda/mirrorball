#!/usr/bin/python
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

import os
import sys
import logging

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

from updatebot import OrderedBot

log = logging.getLogger('tmplogger')

class Bot(OrderedBot):
    def rebuildpackage(self, name):
        """
        """

        # Find all versions of name.
        nvfs = self._updater._conaryhelper.findTrove(
            ('%s:source' % name, None, None), getLeaves=False)
        trvSpecs = [ (x[0].split(':')[0], x[1], None) for x in nvfs ]

        trvMap = self._builder.rebuild(trvSpecs)

        return trvMap

if __name__ == '__main__':
    import os
    import sys

    if 'CONARY_PATH' in os.environ:
        sys.path.insert(0, os.environ['CONARY_PATH'])

    import rmake
    import conary
    import updatebot

    print >>sys.stderr, 'using conary from', os.path.dirname(conary.__file__)
    print >>sys.stderr, 'using rmake from', os.path.dirname(rmake.__file__)
    print >>sys.stderr, 'using updatebot from', os.path.dirname(updatebot.__file__)

    from conary.lib import util
    sys.excepthook = util.genExcepthook()

    import rhnmirror

    from updatebot import config
    from updatebot import log as logSetup

    logSetup.addRootLogger()

    log = logging.getLogger('packagerebuild')

    confDir = mirrorballDir + '/config/%s' % sys.argv[1]

    cfg = config.UpdateBotConfig()
    cfg.read(confDir + '/updatebotrc')

    mcfg = rhnmirror.MirrorConfig()
    mcfg.read(confDir + '/erratarc')

    errata = rhnmirror.Errata(mcfg)
    errata.fetch()

    bot = Bot(cfg, errata)
    bot.rebuildpackage(sys.argv[2])

    import epdb; epdb.st()
