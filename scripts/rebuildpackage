#!/usr/bin/python
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

import os
import sys
import logging

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

from updatebot import OrderedBot

log = logging.getLogger('tmplogger')

class Bot(OrderedBot):
    def _getAllVersions(self, name):
        """
        Get all of the versions of a given source.
        """

        # Find all versions of name.
        nvfs = self._updater._conaryhelper.findTrove(
            ('%s:source' % name, None, None), getLeaves=False)

        return sorted(nvfs)

    def rebuildpackage(self, name, useLatest=None):
        """
        Rebuild all versions of a given package in order.
        @param name: name of the package to rebuild.
        @type name: str
        @param useLatest: A list of package names to use the latest versions of.
                          For instance, you may want to use the latest version
                          of conary to get fixed dependencies.
        @type useLatest: list(str, ...)
        """

        trvSpecs = [ (x[0].split(':')[0], x[1], None)
                     for x in self._getAllVersions(name) ]
        trvMap = self._builder.rebuild(trvSpecs, useLatest=useLatest)

        return trvMap

    def removeSourceFiles(self, name, keepFiles=None):
        """
        Remove all of the files from all source versions of a package that are
        not listed in keepFiles.
        @param name: name of the package to rebuild.
        @type name: str
        @param keepFiles: Set of files to keep in the source component. By
                          default manifest and CONARY will always been kept.
        @type keepFiles: set(str, ...)
        """

        if not keepFiles:
            keepFiles = set()

        # Always avoid removing the CONARY file and the manifest.
        keepFiles.add('CONARY')
        keepFiles.add('manifest')

        helper = self._updater._conaryhelper

        # Get a list of source verisons.
        trvSpecs = self._getAllVersions(name)

        # Rewrite source versions by cloning old versions forward and then
        # modifying them.
        for spec in trvSpecs:
            # Clone version to tip
            targetBranch = spec[1].branch()
            newPkgs = helper.clone(targetBranch, [spec, ], commit=False)

            assert len(newPkgs) == 1
            n, v, f = newPkgs[0]

            # Edit the source to remove files.
            checkoutDir = helper._edit(n, version=v)
            files = set(os.listdir(checkoutDir))
            removeFiles = files - keepFiles
            for fn in removeFiles:
                helper._removeFile(checkoutDir, fn)

            # Commit changes if anything changed.
            if removeFiles:
                helper._commit(checkoutDir, 'automated file removal')


if __name__ == '__main__':
    import os
    import sys

    if 'CONARY_PATH' in os.environ:
        sys.path.insert(0, os.environ['CONARY_PATH'])

    import rmake
    import conary
    import updatebot

    print >>sys.stderr, 'using conary from', os.path.dirname(conary.__file__)
    print >>sys.stderr, 'using rmake from', os.path.dirname(rmake.__file__)
    print >>sys.stderr, 'using updatebot from', os.path.dirname(updatebot.__file__)

    from conary.lib import util
    sys.excepthook = util.genExcepthook()

    import rhnmirror

    from updatebot import config
    from updatebot import log as logSetup

    logSetup.addRootLogger()

    log = logging.getLogger('packagerebuild')

    confDir = mirrorballDir + '/config/%s' % sys.argv[1]

    cfg = config.UpdateBotConfig()
    cfg.read(confDir + '/updatebotrc')

    mcfg = rhnmirror.MirrorConfig()
    mcfg.read(confDir + '/erratarc')

    errata = rhnmirror.Errata(mcfg)
    errata.fetch()

    pkgNames = sys.argv[2:]

    bot = Bot(cfg, errata)

    for pkgName in pkgNames:
        bot.removeSourceFiles(pkgName)
        bot.rebuildpackage(pkgName,
            useLatest=['conary', 'conary-build', 'conary-policy'])

    import epdb; epdb.st()
