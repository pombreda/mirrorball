#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import os
import sys

mbdir = os.path.abspath('../')
sys.path.insert(0, mbdir)

from conary.lib import util
sys.excepthook = util.genExcepthook()

import copy
import logging

from updatebot import log
from updatebot import bot
from updatebot import errors
from updatebot import config
from updatebot import conaryhelper

from conary.deps import deps

log.addRootLogger()

slog = logging.getLogger('findprefixpackages')

cfg = config.UpdateBotConfig()
cfg.read(mbdir + '/config/%s/updatebotrc' % sys.argv[1])

prefixes = set(sys.argv[2:])

bot = bot.Bot(cfg)
helper = bot._updater._conaryhelper

def findPrefixInPaths(pathSet):
    for path in pathSet:
        for prefix in prefixes:
            if path.startswith(prefix):
                return True
    return False

label = helper._ccfg.buildLabel
trvMap = helper._repos.getTroveLeavesByLabel({None: {label: None}})
troveSpecList = []
for troveName in sorted(trvMap.keys()):
    for v in trvMap[troveName]:
        for flv in trvMap[troveName][v]:
            troveSpecList.append((troveName, v, flv))

reportedTroves = set()
for troveName, pathSet in helper._iterPathsByTrove(troveSpecList):
    if troveName not in reportedTroves:
        if findPrefixInPaths(pathSet):
            print troveName
            reportedTroves.add(troveName)
