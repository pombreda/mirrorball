#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import sys

mbdir = os.path.abspath('../')
sys.path.insert(0, mbdir)

from conary.lib import util
sys.excepthook = util.genExcepthook()

import copy
import logging

from updatebot import log
from updatebot import bot
from updatebot import errors
from updatebot import config
from updatebot import conaryhelper

from conary.deps import deps

log.addRootLogger()

slog = logging.getLogger('findprefixpackages')

cfg = config.UpdateBotConfig()
cfg.read(mbdir + '/config/%s/updatebotrc' % sys.argv[1])

prefixes = set(sys.argv[2:])

bot = bot.Bot(cfg)
helper = bot._updater._conaryhelper

def findPrefixInPaths(pathSet):
    for path in pathSet:
        for prefix in prefixes:
            if path.startswith(prefix):
                return True
    return False

label = helper._ccfg.buildLabel
trvMap = helper._repos.getTroveLeavesByLabel({None: {label: None}})
troveSpecList = []
for troveName in sorted(trvMap.keys()):
    for v in trvMap[troveName]:
        for flv in trvMap[troveName][v]:
            troveSpecList.append((troveName, v, flv))

reportedTroves = set()
for troveName, pathSet in helper._iterPathsByTrove(troveSpecList):
    if troveName not in reportedTroves:
        if findPrefixInPaths(pathSet):
            print troveName
            reportedTroves.add(troveName)
