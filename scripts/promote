#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


from header import *

import logging
import tempfile

slog = logging.getLogger('script')

from conary.deps import deps

from updatebot import conaryhelper

helper = conaryhelper.ConaryHelper(cfg)

#import cProfile
#prof = cProfile.Profile()
#prof.enable()

trvLst = helper._repos.findTrove(helper._ccfg.buildLabel, cfg.topGroup)
trvLst = helper._findLatest(trvLst)

slog.info('creating changeset')
cs, packages = helper.promote(
    trvLst,
    [],
    cfg.sourceLabel,
    cfg.targetLabel,
    checkPackageList=False,
    extraPromoteTroves=cfg.extraPromoteTroves,
    commit=False
)
slog.info('changeset created')

#prof.disable()
#prof.dump_stats('promote.lsprof')
#prof.print_stats()

newPkgs = set([ (x[0].split(':')[0], x[1].getSourceVersion(), x[2])
                for x in packages])

pkgMap = {}
for n, v, f in newPkgs:
    if (n, v) not in pkgMap:
        pkgMap[(n, v)] = set()
    pkgMap[(n, v)].add(f)

pkgs = pkgMap.keys()
pkgs.sort()

for pkg in pkgs:
    if pkg[0].startswith('group-'):
        continue
    for flv in pkgMap[pkg]:
        if len(pkgMap[pkg]) > 1 and flv == deps.Flavor():
            continue
        slog.info('promoting %s=%s[%s]' % (pkg[0], pkg[1], flv))


if ui.ask('commit?', default=False):
    slog.info('committing')
    helper._repos.commitChangeSet(cs)
elif ui.ask('write to file?', default=True):
    csFileName = tempfile.mktemp()
    slog.info('writing changeset to %s' % csFileName)
    cs.writeToFile(csFileName)
else:
    slog.info('not committing')

# Log a done mostly for timing purposes
slog.info('done')
