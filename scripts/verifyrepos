#!/usr/bin/python
#
# Copyright (c) SAS Institute, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import sys
import copy

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

from conary.lib import util
sys.excepthook = util.genExcepthook()

import logging
import updatebot.log

updatebot.log.addRootLogger()
log = logging.getLogger('test')

import rpmutils

from updatebot import config
from updatebot import cmdline
from updatebot import pkgsource

cfg = config.UpdateBotConfig()
cfg.read(mirrorballDir + '/config/%s/updatebotrc' % sys.argv[1] )

ui = cmdline.UserInterface()

headers = []
paths = copy.copy(cfg.repositoryPaths)

from Queue import Empty
from multiprocessing import Process, Queue

class Worker(Process):
    def __init__(self, inq, outq, errq, *args, **kwargs):
        Process.__init__(self, *args, **kwargs)

        self.inq = inq
        self.outq = outq
        self.errq = errq

        self.daemon = True

    def run(self):
        while True:
            try:
                platform, repoPath = self.inq.get()
                cfg = config.UpdateBotConfig()
                cfg.read(mirrorballDir + '/config/%s/updatebotrc' % platform)

                cfg.repositoryPaths = [ repoPath, ]
                pkgSource = pkgsource.PackageSource(cfg, ui)
                pkgSource.load()

                for location in pkgSource.locationMap:
                    if not location.startswith(repoPath):
                        continue
                    url = cfg.repositoryUrl + '/' + location
                    try:
                        log.info('testing %s' % url)
                        header = rpmutils.readHeader(url)
                    except Exception, e:
                        log.info('failed to open %s, %s' % (url, e))
                        self.outq.put((url, str(e)))
            except Exception, e:
                self.errq.put(str(e))


class Mgr(object):
    def __init__(self, max=6):
        self.max = max
        self.inq = Queue()
        self.outq = Queue()
        self.errq = Queue()

        self._procs = []

        self._results = []

    def start(self):
        for i in range(self.max):
            proc = Worker(self.inq, self.outq, self.errq)
            proc.start()
            self._procs.append(proc)

    def doWork(self, platform, repoPath):
        self.inq.put((platform, repoPath))

    def getResults(self):
        while not self.outq.empty():
            try:
                res = self.outq.get_nowait()
                self._results.append(res)
            except Empty, e:
                pass
        return self._results

mgr = Mgr(max=len(paths))
for path in paths:
    mgr.doWork(sys.argv[1], path)

mgr.start()

import epdb; epdb.st()
