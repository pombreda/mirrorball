#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


"""
Check sanity of the promote from rpl:1 -> rpl:1-qa.
"""

import os
import sys
import time
from conary.lib import util
sys.excepthook = util.genExcepthook()

from conary.lib import log
from conary import trove
from conary import versions
from conary import conarycfg
from conary import conaryclient

log.setVerbosity(log.INFO)

def ask(prompt, default=None):
    while True:
        try:
            prompt = '%s [%s]' % (prompt, default)
            resp = raw_input(prompt + ' ')
        except EOFError:
            return None

        if not resp:
            return default

        return resp

cfg = conarycfg.ConaryConfiguration(True)
cfg.setContext('1-binary')

client = conaryclient.ConaryClient(cfg)

frmlabel = versions.VersionFromString('/conary.rpath.com@rpl:devel//1')
groupTrvs = client.repos.findTrove(['conary.rpath.com@rpl:1', ], ('group-os', frmlabel, None))

groupTrvs.sort()
groupTrvs.reverse()

grpTrvs = [ x for x in groupTrvs if x[1] == groupTrvs[0][1] ]


# Find all of the troves in the groups that are to be promoted.
log.info('Create group changesets')
grpCsReq = [(x, (None, None), (y, z), True) for x, y, z in grpTrvs ]
grpCs = client.createChangeSet(grpCsReq, withFiles=False, withFileContents=False, recurse=False)

oldTrvSpecs = set()
for topLevelCs in grpCs.iterNewTroveList():
    trv = trove.Trove(topLevelCs, skipIntegrityChecks=True)
    oldTrvSpecs.update(set([ x for x in trv.iterTroveList(weakRefs=True, strongRefs=True) ]))


# Build mapping of frumptuus.
labelMap = {
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1'):
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1-qa'),
    versions.VersionFromString('/conary.rpath.com@rpl:1'):
    versions.VersionFromString('/conary.rpath.com@rpl:1-qa'),
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1-xen'):
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1-xen-qa'),
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1-vmware'):
    versions.VersionFromString('/conary.rpath.com@rpl:devel//1-vmware-qa'),
}

# List of labels that should not be promoted.
hiddenLabels = [
    versions.Label('conary.rpath.com@rpl:1-compat'),
]


# Find troves that have labels that are not in the label map.
log.info('Searching for troves that will not be promoted')
branches = labelMap.keys()
found = False
for name, version, flavor in sorted(oldTrvSpecs):
    if version.branch() not in branches:
        match = False
        for label in hiddenLabels:
             if label in version.versions:
                match = True
        if not match:
            found = True
            log.warning('not promoting %s=%s[%s]' % (name, version, flavor)) 

if not found:
    log.info('No troves found that will not be promoted')

# Ask before moving on.
okay = conaryclient.cmdline.askYn('continue with clone? [y/N]', default=False)
if not okay:
    sys.exit(0)

# Make the promote changeset.
log.info('Creating promote changeset')
cb = conaryclient.callbacks.CloneCallback(cfg, 'automated commit')
success, cs = client.createSiblingCloneChangeSet(
        labelMap,
        grpTrvs,
        cloneSources=True,
        callback=cb,
        updateBuildInfo=False)

# Check status
if not success:
    log.critical('Failed to create promote changeset')
    sys.exit(1)

# Commit changeset.
if conaryclient.cmdline.askYn('commit changset? [y/N]', default=False):
    start = time.time()
    client.repos.commitChangeSet(cs, callback=cb)
    total = time.time() - start
    log.info('commit time: %s' % total)
elif conaryclient.cmdline.askYn('save changeset? [Y/n]', default=True):
    location = ask('where?', default=os.path.join(os.getcwd(), 'promote-changeset.ccs'))
    cs.writeToFile(location)
