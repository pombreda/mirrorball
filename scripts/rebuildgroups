#!/usr/bin/python
#
# Copyright (c) 2010 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

import os
import sys
import time
import logging
import itertools

mirrorballDir = os.path.abspath('../')
sys.path.insert(0, mirrorballDir)

if 'CONARY_PATH' in os.environ:
    sys.path.insert(0, os.environ['CONARY_PATH'])


from conary import versions
from conary.deps import deps

from updatebot import OrderedBot

log = logging.getLogger('tmplogger')

class Bot(OrderedBot):
    def rebuildgroups(self, updatedPackages=None, resolveTargetVersions=True,
        readdPackages=True, restart=False):
        """
        Rebuild all groups on the devel label. This requires rewriting the group
        model to point at the target label and re-adding content.
        @param updatedPackages: List of package names that have been rebuilt and
                                thus need to be updated when modifying the
                                groups.
        @type updatedPackages: list(str, ...)
        """

        if not updatedPackages:
            updatedPackages = []

        if resolveTargetVersions or updatedPackages:
            readdPackages = True

        # load package source
        self._pkgSource.load()

        versionMap = {
            'rhel': {'4': '4.0',
                     '5': '5.0', },
            'centos': {'5': '0', },
            'sles': {'10': 'sp3', },
            'sles11': {'11': '0', },
        }

        # Make sure to include any packages that were built from the same
        # source.
        if updatedPackages:
            siblingPackages = set()

            log.info('looking up siblings')
            req = [ (x, None, None) for x in updatedPackages ]

            labels = [ self._updater._conaryhelper.getConaryConfig().buildLabel, ]
            if self._cfg.platformSearchPath:
                labels += self._cfg.platformSearchPath

            nvfMap = self._updater._conaryhelper.findTroves(req, labels=labels, getLeaves=False)
            nvfs = [ x for x in itertools.chain(*nvfMap.itervalues()) ]

            siblingMap = self._updater._conaryhelper.getSiblingPackages(nvfs,
                allVersions=True)

            for siblings in siblingMap.itervalues():
                siblingPackages |= set([ x[0].split(':')[0] for x in siblings ])
            updatedPackages = list(siblingPackages)

            log.info('done loading siblings')

        seen = {}
        trvMap = {}
        results = []
        startReplace = False

        # Iterate over all upstream group versions that should exist.
        for updateId, updates in self._errata.iterByIssueDate(current=-1):
            if updateId == 0:
                prodMap = versionMap[self._cfg.platformName]
                version = prodMap[self._cfg.upstreamProductVersion]
            else:
                version = self._errata.getBucketVersion(updateId)

            if not restart or updateId > self._groupmgr.latest.errataState:
                startReplace = True
            elif startReplace:
                raise RuntimeError, 'found out of order groups'
            else:
                continue

            log.info('%s: retrieving group model information' % version)
            group = self._groupmgr.getGroup(version=version)

            # Stop when we get to a version that isn't in the repository.
            if group is None:
                break

            # Get all of the nvfs from the group model.
            nvfs = set()
            checkUpdates = set()
            emptyFlavors = set()
            for pkg in group.iterpackages():
                n = str(pkg.name)
                # if n.find('spice-usb') != -1:
                #     v = versions.ThawVersion(str(pkg.version).replace('workstation', 'workstation-devel'))
                # else:
                v = versions.ThawVersion(str(pkg.version))

                f = deps.ThawFlavor(str(pkg.flavor))
                if str(f) == '':
                    f = None

                if n in updatedPackages:
                    checkUpdates.add((n, v, f))
                elif f is None:
                    emptyFlavors.add((n, v, f))
                else:
                    nvfs.add((n, v, f))

            # Lookup anything that is expected to have been rebuilt.
            if checkUpdates:
                log.info('%s: looking up version information for rebuild '
                         'packages' % version)

                req = set()
                for n, v, f in checkUpdates:
                    upVer = '/'.join([v.branch().label().asString(),
                                      v.trailingRevision().version])
                    req.add((n, upVer, None))

                binSpecMap = self._updater._conaryhelper.findTroves(req)

                for binSpecs in binSpecMap.itervalues():
                    assert len(binSpecs) > 1

                    latest = sorted(binSpecs)[-1]

                    #log.info('%s: found updated version of %s %s -> %s'
                    #         % (version, n, v, latest[1]))

                    toAdd = set([ x for x in binSpecs if x[1] == latest[1] ])
                    nvfs.update(toAdd)
            # Lookup anything that has an empty flavor.
            log.info('%s: looking up version information for empty flavors'
                     % version)
            req = set([ (x[0], x[1], None) for x in emptyFlavors ])
            found = self._updater._conaryhelper.findTroves(req)

            for n, v, f in itertools.chain(*found.values()):
                nvfs.add((n, v, f))

            # Lookup cloned from info for all versions.
            if resolveTargetVersions:
                log.info('%s: retrieving target version information' % version)
                targetVersions, failed = self._updater.getTargetVersions(nvfs,
                    logErrors=False)

                # Make sure any that failed are in the set of packages that are
                # expected to have updates.
                # NOTE: This normally happens if the group model has already
                #       been remapped to the target label.
                assert not [ x for x in failed if x[0] not in updatedPackages ]

                # Take the union of all versions on the target label and those
                # that have not yet been promoted.
                newVersions = set(targetVersions) | set(failed)
            else:
                newVersions = nvfs

            # Add all of the new versions.
            if readdPackages:
                log.info('%s: adding remapped versions' % version)
                pkgs = {}
                for n, v, f in newVersions:
                    pkgs.setdefault(n, dict()).setdefault(v, set()).add(f)

                for n, vMap in pkgs.iteritems():
                    assert len(vMap) == 1
                    group.removePackage(n)
                    for v, flvs in vMap.iteritems():
                        group.addPackage(n, v, flvs)

            # Now deal with the standard group contents by recreating the
            # standard group from the new group configuration information.

            # Remove the existing standard group if there is one.
            log.info('%s: regenerating standard group' % version)
            standardNames = [ n for n, m in group.iteritems()
                              if 'standard' in n ]
            assert len(standardNames) == 1
            standardName = standardNames[0]
            group._groups.pop(standardName, None)

            # Run through all of the adds and removes for the standard group.
            for uid, ups in self._errata.iterByIssueDate(current=-1):
                if uid > group.errataState:
                    break
                self._modifyGroups(uid, group)

            log.info('%s: committing contents to latest' % version)
            group = group.commit(copyToLatest=True)

            log.info('%s: building group' % version)
            res = group.buildmany()
            results.append(res)

            # Wait for the first results to make sure the group will rebuild
            # properly.
            if not trvMap:
                log.info('waiting for first build to complete before continuing')
                while not res.isDone:
                    time.sleep(1)

            # Check for any built groups.
            completed = [ x for x in results if x.isDone ]
            if completed:
                for res in completed:
                    for src, bins in res.results.iteritems():
                        log.info('%s: built troves' % version)
                        for n, v, f in sorted(bins):
                            log.info('    %s=%s[%s]' % (n, v, f))
                    results.remove(res)
                    trvMap.update(res.results)

        return trvMap


if __name__ == '__main__':
    import rmake
    import conary
    import updatebot

    print >>sys.stderr, 'using conary from', os.path.dirname(conary.__file__)
    print >>sys.stderr, 'using rmake from', os.path.dirname(rmake.__file__)
    print >>sys.stderr, 'using updatebot from', os.path.dirname(updatebot.__file__)

    from conary.lib import util
    sys.excepthook = util.genExcepthook()

    from updatebot import config
    from updatebot import log as logSetup

    logSetup.addRootLogger()

    log = logging.getLogger('grouprebuild')

    confDir = mirrorballDir + '/config/%s' % sys.argv[1]

    cfg = config.UpdateBotConfig()
    cfg.read(confDir + '/updatebotrc')

    if cfg.platformName == 'rhel':
        import rhnmirror

        mcfg = rhnmirror.MirrorConfig()
        mcfg.read(confDir + '/erratarc')

        errata = rhnmirror.Errata(mcfg)

        bot = Bot(cfg, errata)

    else:
        bot = Bot(cfg, None)

        if cfg.platformName == 'sles':
            from errata.sles import AdvisoryManager as Errata

        if cfg.platformName == 'sles11':
            from errata.sles11 import AdvisoryManager11 as Errata

        elif cfg.platformName == 'centos':
            from errata.centos import AdvisoryManager as Errata

        else:
            raise RuntimeError, 'no errata source found for %s' % cfg.platformName

        errata = Errata(bot._pkgSource)
        bot._errata._errata = errata

    rebuiltPackages = [ 'rpm', ]

    tags = []

    extraPackages = []

    bot.rebuildgroups(restart=False, resolveTargetVersions=False, readdPackages=True,
        updatedPackages=rebuiltPackages + tags + extraPackages)

    import epdb; epdb.st()
