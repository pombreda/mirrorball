#!/usr/bin/python
#
# Copyright (c) 2009 rPath, Inc.
#
# This program is distributed under the terms of the Common Public License,
# version 1.0. A copy of this license should have been distributed with this
# source file in a file called LICENSE. If it is not present, the license
# is always available at http://www.rpath.com/permanent/licenses/CPL-1.0.
#
# This program is distributed in the hope that it will be useful, but
# without any warranty; without even the implied warranty of merchantability
# or fitness for a particular purpose. See the Common Public License for
# full details.
#

import os
import sys
from conary.lib import util as cutil

sys.excepthook = cutil.genExcepthook()

sys.path.insert(0, os.environ['HOME'] + '/hg/mirrorball')

cfgDir = os.environ['HOME'] + '/hg/mirrorball/config'

platform = sys.argv[1]

from conary import versions

from updatebot import log
from updatebot import config
from updatebot import update
from updatebot import pkgsource
from updatebot.lib import util

log.addRootLogger()

import logging
slog = logging.getLogger('script')

cfg = config.UpdateBotConfig()
cfg.read(util.join(cfgDir, platform, 'updatebotrc'))

# set metadata on the taget label
topGroups = [ (cfg.topGroup[0], cfg.targetLabel, cfg.topGroup[2]),
              (cfg.topGroup[0], versions.VersionFromString('/' + cfg.topGroup[1]), cfg.topGroup[2]), ]

pkgSource = pkgsource.PackageSource(cfg)
updater = update.Updater(cfg, pkgSource)
helper = updater._conaryhelper

pkgSource.load()

for topGroup in topGroups:
    for srcTroveSpec, binSet in helper.getSourceTroves(topGroup).iteritems():
        name = srcTroveSpec[0].split(':')[0]
        if name not in pkgSource.srcNameMap:
            slog.warn('%s not found in package source, not setting metadata' % name)
            continue
        if srcTroveSpec[1].getHost() != topGroup[1].getHost():
            slog.warn('not setting metadata for %s, not on same label' % name)
            continue
        updater.setTroveMetadata(srcTroveSpec, binSet)
