#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import os
import sys
from conary.lib import util as cutil

sys.excepthook = cutil.genExcepthook()

sys.path.insert(0, os.environ['HOME'] + '/hg/mirrorball')

cfgDir = os.environ['HOME'] + '/hg/mirrorball/config'

platform = sys.argv[1]

from conary import versions

from updatebot import log
from updatebot import config
from updatebot import update
from udpatebot import cmdline
from updatebot import pkgsource
from updatebot.lib import util

log.addRootLogger()

import logging
slog = logging.getLogger('script')

cfg = config.UpdateBotConfig()
cfg.read(util.join(cfgDir, platform, 'updatebotrc'))

# set metadata on the taget label
topGroups = [ (cfg.topGroup[0], cfg.targetLabel, cfg.topGroup[2]),
              (cfg.topGroup[0], versions.VersionFromString('/' + cfg.topGroup[1]), cfg.topGroup[2]), ]

ui = cmdline.UserInterface()

pkgSource = pkgsource.PackageSource(cfg, ui)
updater = update.Updater(cfg, ui, pkgSource)
helper = updater._conaryhelper

pkgSource.load()

for topGroup in topGroups:
    for srcTroveSpec, binSet in helper.getSourceTroves(topGroup).iteritems():
        name = srcTroveSpec[0].split(':')[0]
        if name not in pkgSource.srcNameMap:
            slog.warn('%s not found in package source, not setting metadata' % name)
            continue
        if srcTroveSpec[1].getHost() != topGroup[1].getHost():
            slog.warn('not setting metadata for %s, not on same label' % name)
            continue
        updater.setTroveMetadata(srcTroveSpec, binSet)
