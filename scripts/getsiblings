#!/usr/bin/python
#
# Copyright (c) rPath, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#


import sys
import itertools

from conary import trove
from conary import conarycfg
from conary import conaryclient
from conary.conaryclient import cmdline

if __name__ == '__main__':
    cfg = conarycfg.ConaryConfiguration(True)
    client = conaryclient.ConaryClient(cfg)
    trvSpec = cmdline.parseTroveSpec(sys.argv[1])

    nvfLst = client.repos.findTrove(cfg.installLabelPath, trvSpec)
    sources = client.repos.getTroveInfo(trove._TROVEINFO_TAG_SOURCENAME, nvfLst)

    srcreq = set()
    for (n, v, f), src in itertools.izip(nvfLst, sources):
        sn = src()
        sv = v.getSourceVersion()

        srcreq.add((sn, sv))

    nvfmap = {}
    for sn, sv in srcreq:
        nvfmap[(sn, sv)] = client.repos.getTrovesBySource(sn, sv)

    for (sn, sv), trvs in nvfmap.iteritems():
        print '%s=%s' % (sn, sv)
        vn = {}
        for n, v, f in trvs:
            vn.setdefault(v, set()).add(n)
        for v in reversed(sorted(vn)):
            print
            for n in sorted(vn[v]):
                print '    %s=%s' % (n, v)
