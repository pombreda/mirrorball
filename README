Date: 2008-09-02
Author: Elliot Peele <elliot@rpath.com>

This document is meant as a guide to get people up and running with a
working updatebot configuration and some basic usage information to get
people started.

* Setting up updatebot to work in your environment.
* How to do:
 o build packages
 o import new packages
 o build groups
 o update a platform


========================
= Setting up UpdateBot =
========================

First thing you will need is a few checked out mercurial repositories or
to have these modules installed on your system.

Clone the following repositories from hg.rpath.com to ~/hg. (all
scripts currently assume that checkouts are in ~/hg)
* mirrorball
* conary
* rmake
* rpath-xmllib

The test suite unfortunately cannot be run outside of rPath, as it
depends on rPath-internal modules.

Once you have cloned and built the required modules you should be about
ready to run the various UpdateBot scripts.


=====================================================
= A quick walk-through of the mirrorball repository =
=====================================================

* aptmd - module for parsing apt repository metdata. This module
currently only implements parsing Packages.tgz and Sources.tgz.
* commands - the beginning of an actual bot command rather than using the
scripts that will be talked about later.
* extra - various misc. files.
* pylint - directory for running pylint (running make in this directory
  will run pylint on all source directories with the correct config).
* repomd - module for parsing yum repository meta data.
* rpmutils - module containing utilities for dealing with rpms.
* scripts - directory containing scripts for maintaining platforms.
* test - directory containing the testsuite for updatebot
* updatebot - main module


=================
= Scripts/HowTo =
=================

Currently all scripts are hard coded to a specific platform. You will
need to change the path to updatebotrc for the platform that you want to
use. (NOTE: in the updatebotrc for the platform you will need to change
the configPath to point at your checkout).

* buildgroups - build source group in all configured flavors
* buildpackages - build list of packages in all configured contexts
* checkoutall.py - checks out all source components included in the
  platform.
* findbinaries.py - search a label for all of the binary packages that
  where generated from the latest versions of all source troves
  generated by updatebot.
* hardlink.py - Note that this is not our code. Used in the mirror
  scripts to hard link trees and save space.  Licensed under the GPL.
* import.py - make sure all packages specified in the config are imported
  and built.
* pkgsource.py - loads all metadata from the repository and lets you
  interactively navigate through pkgSource datastructures.
* sync-opensuse.sh - used to keep the OpenSuSE mirror in sync.
* sync-ubuntu.sh - used to keep the Ubuntu mirror in sync.
* updatelicense.py - checks out all sources in a top level group and makes
  sure the license block on the recipe exists.
* update.py - update a platform (update packages, build packages, build
  groups, send advisories)
